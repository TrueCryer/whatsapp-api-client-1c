
#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПодготовитьНастройки();
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Попытка
		ОбновитьСтатусСервиса();
	Исключение
		Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРеквизитовКомандФормы

&НаКлиенте
Процедура ПолучатьВходящиеУведомленияПриИзменении(Элемент)
	Если ПолучатьВходящиеУведомления Тогда
		webhookUrl = ХостВебхуковПоУмолчанию();
		Элементы.ДеталиНастройкиУведомлений.Доступность = Истина;
	Иначе
		webhookUrl = "";
		Элементы.ДеталиНастройкиУведомлений.Доступность = Ложь;
	КонецЕсли;
	
	НастройкиСохранены = УстановитьНастройкуСервиса(Хост, IdInstance, ApiToken, "webhookUrl", webhookUrl);
	ОбновитьСтатусСервиса();

КонецПроцедуры

&НаКлиенте
Процедура IdInstanceПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ApiTokenПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатус(Команда)
	
	ОбновитьСтатусСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтандартныеНастройки(Команда)
	Оповещение = Новый ОписаниеОповещения("ЗавершитьПоказСтандартныхНастроек", ЭтотОбъект);
	ТекстВопроса = ПодставитьПараметрыВСтроку("Будут установлены стандартные настройки. Получение входящих уведомлений на текущий адрес %1 будет отключено.", webhookUrl);
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Отмена");
	КнопкиВопроса.Добавить("Установить стандартные настройки");
	ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	ОбновитьСтатусСервиса();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщение(Команда)
	
	Если Не ЗначениеЗаполнено(НомерТелефона) Тогда
		Сообщить("Номер телефона не заполнен");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстСообщения) Тогда
		Сообщить("Текст сообщения не заполнен");
		Возврат;
	КонецЕсли;
	
	ОтправитьСообщениеWhatsApp(Хост, IdInstance, ApiToken, НомерТелефона, ТекстСообщения);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСообщениеЧерезВебхук(Команда)
	ТекстПолученноеСообщение = "";
	Элементы.СтатусПолучениеСообщения.Видимость = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ПолучитьСообщение", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СканироватьQRКодКоманда(Команда)
	
	Если ЭтотОбъект.ПроверитьЗаполнение() Тогда

		ОтключитьОбработчикОжидания("Подключаемый_СканироватьQRКод");
		Подключаемый_СканироватьQRКод();
		ПодключитьОбработчикОжидания("Подключаемый_СканироватьQRКод", 5);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьВходящиеСообщенияИФайлыПриИзменении(Элемент)
	НастройкиСохранены = УстановитьНастройкуСервиса(Хост, IdInstance, ApiToken, "incomingWebhook", 
		? (ПолучатьВходящиеСообщенияИФайлы, "yes", "no"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьСтатусыОтправленныхСообщенийПриИзменении(Элемент)
	НастройкиСохранены = УстановитьНастройкуСервиса(Хост, IdInstance, ApiToken, "outgoingWebhook", 
		? (ПолучатьВходящиеСообщенияИФайлы, "yes", "no"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьУведомленииОСостоянииТелефонаПриИзменении(Элемент)
	НастройкиСохранены = УстановитьНастройкуСервиса(Хост, IdInstance, ApiToken, "deviceWebhook", 
		? (ПолучатьВходящиеСообщенияИФайлы, "yes", "no"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьУведомленияОСостоянииАккаунтаПриИзменении(Элемент)
	НастройкиСохранены = УстановитьНастройкуСервиса(Хост, IdInstance, ApiToken, "stateWebhook", 
		? (ПолучатьВходящиеСообщенияИФайлы, "yes", "no"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмечатьВходящиеСообщенияПрочитаннымиПриИзменении(Элемент)
	НастройкиСохранены = УстановитьНастройкуСервиса(Хост, IdInstance, ApiToken, "markIncomingMessagesReaded", 
		? (ОтмечатьВходящиеСообщенияПрочитанными, "yes", "no"));
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалОтправкиСообщенийПриИзменении(Элемент)
	НастройкиСохранены = УстановитьНастройкуСервиса(Хост, IdInstance, ApiToken, "delaySendMessagesMilliseconds", ИнтервалОтправкиСообщений);
КонецПроцедуры

&НаКлиенте
Процедура РазлогинитьАккаунтКоманда(Команда)
	РазлогинитьАккаунт(Хост, IdInstance, ApiToken);
	ОбновитьСтатусСервиса();
КонецПроцедуры

#КонецОбласти

#Область GreeAPI

&НаКлиентеНаСервереБезКонтекста
Функция ХостПоУмолчанию()
	Возврат "api.green-api.com";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ХостВебхуковПоУмолчанию()
	Возврат "https://webhook.green-api.com";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция URLСканированиеQRКода(Хост, Инстанс, Токен)
	Возврат ПодставитьПараметрыВСтроку("https://%1/waInstance%2/%3", Хост, Инстанс, Токен);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция URLМетодаСервиса(Инстанс, Токен, Метод)
	Возврат ПодставитьПараметрыВСтроку("waInstance%1/%2/%3", Инстанс, Метод, Токен);
КонецФункции

&НаКлиенте
Функция СканироватьQRКод(Хост, Инстанс, Токен)
	
	Возврат ОтправитьGETЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "qr"), Истина);
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтатусСервиса(Хост, Инстанс, Токен)
	
	Ответ = ОтправитьGETЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "getStateInstance"), Истина);
	Возврат НРег(Ответ.stateInstance) = "authorized";
	
КонецФункции

&НаКлиенте
Функция ОтправитьСообщениеWhatsApp(Хост, Инстанс, Токен, Телефон, Сообщение)
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", "");
	Структура.Вставить("phoneNumber", Телефон);
	Структура.Вставить("message", Сообщение);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Ответ = ОтправитьPOSTЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "sendMessage"), Тело);
	Сообщить(ПодставитьПараметрыВСтроку("Сообщение отправлено успешно. idMessage=%1", Ответ.idMessage));
	
КонецФункции

&НаКлиенте
Функция ПолучитьСообщение(Инстанс, Токен)
	
	ТипыУведомлений = Новый Структура;
	ТипыУведомлений.Вставить("ВходящееСообщение", "incomingMessageReceived");
	ТипыУведомлений.Вставить("СтатусОтправленногоСообщения", "outgoingMessageStatus");
	ТипыУведомлений.Вставить("СостояниеАккаунта", "stateInstanceChanged");
	ТипыУведомлений.Вставить("СостояниеТелефона", "deviceInfo");
	
	Пока Истина Цикл
		Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "receiveNotification"), Истина);
		Если Ответ <> Неопределено Тогда
			receiptIdТекущий = Формат(Ответ.receiptId, "ЧГ=0");
			
			Если Ответ.body.typeWebhook = ТипыУведомлений.ВходящееСообщение  Тогда
				
				Если Ответ.body.messageData.typeMessage = "textMessage" Тогда
					Возврат Ответ.body.messageData.textMessageData.textMessage;
				ИначеЕсли Ответ.body.messageData.typeMessage = "extendedTextMessage" Тогда
					Возврат Ответ.body.messageData.extendedTextMessageData.text;
				ИначеЕсли Ответ.body.messageData.typeMessage = "imageMessage"
					Или Ответ.body.messageData.typeMessage = "videoMessage"
					Или Ответ.body.messageData.typeMessage = "documentMessage"
					Или Ответ.body.messageData.typeMessage = "audioMessage" Тогда
					
					Возврат Ответ.body.messageData.fileMessageData.downloadUrl;
				ИначеЕсли Ответ.body.messageData.typeMessage = "locationMessage" Тогда
					Возврат "latitude=" + Ответ.body.messageData.locationMessageData.latitude 
						+ "longitude=" + Ответ.body.messageData.locationMessageData.longitude
				ИначеЕсли Ответ.body.messageData.typeMessage = "contactMessage" Тогда
					Возврат Ответ.body.messageData.contactMessageData.vcard;
				Иначе
					Возврат Ответ.body.messageData;
				КонецЕсли;
				
			ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СтатусОтправленногоСообщения Тогда
				
				Возврат Ответ.body.status;
				
			ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СостояниеАккаунта Тогда
				
				Возврат Ответ.body.stateInstance;
				
			ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СостояниеТелефона Тогда
				
				Возврат Ответ.body.deviceData.deviceModel;
				
			Иначе
				УдалитьСообщение(Инстанс, Токен, receiptIdТекущий); // Другие вебхуки пропускаем
			КонецЕсли;
			
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция УдалитьСообщение(Инстанс, Токен, ТегСообщения)
	
	Адрес = URLМетодаСервиса(Инстанс, Токен, "deleteNotification") + "/" + ТегСообщения;
	Ответ = ОтправитьDELETEЗапрос(ХостПоУмолчанию(), Адрес, Истина);
	Возврат Ответ.result;
	
КонецФункции

&НаКлиенте
Функция ПолучитьНастройкиСервиса(Хост, Инстанс, Токен)
	
	Ответ = ОтправитьGETЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "getSettings"), Истина);
	Возврат Ответ;
	
КонецФункции

&НаКлиенте
Функция УстановитьНастройкуСервиса(Хост, Инстанс, Токен, Ключ, Значение)
	
	Структура = Новый Структура;
	Структура.Вставить(Ключ, Значение);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Ответ = ОтправитьPOSTЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "setSettings"), Тело);
	Возврат Ответ.saveSettings;
	
КонецФункции

&НаКлиенте
Функция РазлогинитьАккаунт(Хост, Инстанс, Токен)
	
	Ответ = ОтправитьGETЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "Logout"), Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область HttpКлиент

&НаКлиенте
Функция ОтправитьGETЗапрос(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать),
			Новый СертификатыУдостоверяющихЦентровWindows());
		
		Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.Получить(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		Если Не ПустаяСтрока(ТелоОтвета) Тогда
			Чтение = Новый ЧтениеJSON();
			Чтение.УстановитьСтроку(ТелоОтвета);
			ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
			Чтение.Закрыть();
			Возврат ПрочитанныйОтвет;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОтправитьPOSTЗапрос(Хост, Адрес, Тело)
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать),
		Новый СертификатыУдостоверяющихЦентровWindows());
	
	Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	ВебЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	ВебЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ = Соединение.ОтправитьДляОбработки(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ОтправитьDELETEЗапрос(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
			Новый СертификатКлиентаWindows(СпособВыбораСертификатаWindows.Выбирать),
			Новый СертификатыУдостоверяющихЦентровWindows());
		
		Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.ВызватьHTTPМетод("DELETE", ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_СканироватьQRКод() Экспорт
	
	Элементы.QRКод.Видимость = Ложь;
	
	Ответ = СканироватьQRКод(Хост, IdInstance, ApiToken);
	
	Если Ответ = Неопределено Тогда
		Сообщить("Непредвиденная ошибка");
		Возврат;
	КонецЕсли;
	
	СтатусQRКода = Ответ.type;
	
	Если Ответ.type = "AlreadyLogged" Тогда
		ОтключитьОбработчикОжидания("Подключаемый_СканироватьQRКод");
	ИначеЕсли Ответ.type = "qrCode" Тогда
		QRКод = ПолучитьТекстИзМакета("QRМакет");
		QRКод = СтрЗаменить(QRКод, "%QR_DATA%", Ответ.message);
		Элементы.QRКод.Видимость = Истина;
	КонецЕсли;
	
	ОбновитьСтатусСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьСообщение() Экспорт
		
	ПОлученноеСообщение = ПолучитьСообщение(IdInstance, ApiToken);
	
	Если ПОлученноеСообщение = Неопределено Тогда
		Сообщить("Не сообщений для получения");
	Иначе
		ТекстПолученноеСообщение = ПОлученноеСообщение;
		УдалитьСообщение(IdInstance, ApiToken, receiptIdТекущий);
	КонецЕсли;
	
	Элементы.СтатусПолучениеСообщения.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусСервиса()
	
	Если Не ЭтотОбъект.ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтатусСервиса = ПолучитьСтатусСервиса(Хост, IdInstance, ApiToken);
	
	Элементы.НастройкиВходящихУведомлений.Видимость = СтатусСервиса;
	Если СтатусСервиса Тогда
		НастройкиСервиса = ПолучитьНастройкиСервиса(Хост, IdInstance, ApiToken);
		ПолучатьВходящиеУведомления = ЗначениеЗаполнено(НастройкиСервиса.webhookUrl);
		webhookUrl = НастройкиСервиса.webhookUrl;
		ПолучатьВходящиеСообщенияИФайлы = НастройкиСервиса.incomingWebhook = "yes";
		ПолучатьСтатусыОтправленныхСообщений = НастройкиСервиса.outgoingWebhook = "yes";
		ПолучатьУведомленииОСостоянииТелефона = НастройкиСервиса.deviceWebhook = "yes";
		ПолучатьУведомленияОСостоянииАккаунта = НастройкиСервиса.stateWebhook = "yes";
		ОтмечатьВходящиеСообщенияПрочитанными = НастройкиСервиса.markIncomingMessagesReaded = "yes";
		ИнтервалОтправкиСообщений = НастройкиСервиса.delaySendMessagesMilliseconds;
		
		ЕстьНестадантныенастройки = ЗначениеЗаполнено(НастройкиСервиса.webhookUrl) И СтрНайти(НастройкиСервиса.webhookUrl, ХостВебхуковПоУмолчанию()) = 0;
		Элементы.ДеталиПредупреждениеСтандартныеНастройки.Видимость = ЕстьНестадантныенастройки;
		Элементы.ГруппаПояснение1.Видимость = ЕстьНестадантныенастройки Или Не ЗначениеЗаполнено(НастройкиСервиса.webhookUrl);
		Элементы.ГруппаПолучениеСообщений.Видимость = Не ЕстьНестадантныенастройки И ЗначениеЗаполнено(НастройкиСервиса.webhookUrl);
		Элементы.ПолучатьВходящиеУведомления.Видимость = Не ЕстьНестадантныенастройки;
		Элементы.ДеталиНастройкиУведомлений.Видимость = Не ЕстьНестадантныенастройки;
		Элементы.СканироватьQRКод.Видимость = Ложь;
		Элементы.РазлогинитьАккаунт.Видимость = Истина;
		ОтключитьОбработчикОжидания("Подключаемый_СканироватьQRКод");
	Иначе
		Элементы.СканироватьQRКод.Видимость = Истина;
		Элементы.РазлогинитьАккаунт.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПоказСтандартныхНастроек(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "Установить стандартные настройки" Тогда
		НастройкиСохранены = УстановитьНастройкуСервиса(Хост, IdInstance, ApiToken, "webhookUrl", ХостВебхуковПоУмолчанию());
		ОбновитьСтатусСервиса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьНастройки()
	
	Хост = ХостПоУмолчанию();
	ТекстСообщения = "Hello world!";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПоказСсылки(КодВозврата, ДопПараметры) Экспорт
	// Логика не требуется
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстИзМакета(ИмяМакета)
	Об = РеквизитФормыВЗначение("Объект");
	ОбластьМакета = Об.ПолучитьМакет(ИмяМакета);
	Возврат ОбластьМакета.ТекущаяОбласть.Текст;
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание:
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
&НаКлиентеНаСервереБезКонтекста
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	

	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
КонецФункции

#КонецОбласти
