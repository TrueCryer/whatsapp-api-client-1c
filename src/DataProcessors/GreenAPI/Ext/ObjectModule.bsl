
#Область ПрограммныйИнтерфейсОтправкиДанных

// Метод предназначен для отправки текстового сообщения в личный или групповой чат. 
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из очереди регулирует 
// параметр Интервал отправки сообщений.
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  Сообщение - Строка - Текст сообщения. Поддерживаются символы emoji 
// 
// Возвращаемое значение:
//   - 
//
Функция ОтправитьСообщение(Телефон, Сообщение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", "");
	Структура.Вставить("phoneNumber", Телефон);
	Структура.Вставить("message", Сообщение);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendMessage"), Тело);
	
КонецФункции

// Метод предназначен для отправки файла, загружаемого по ссылке.
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из 
// очереди регулирует параметр Интервал отправки сообщений.
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  УРЛФайла - Строка - Интернет-ссылка на файл
//  ИмяФайла - Строка - Название файла обязательно с расширением. Например: readme.txt
//  Заголовок - Строка - Представление файла для whatsapp-а
// 
// Возвращаемое значение:
//   - 
//
Функция ОтправитьФайлПоСсылке(Телефон, УРЛФайла, ИмяФайла, Заголовок = "") Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Структура.Вставить("urlFile", УРЛФайла);
	Структура.Вставить("fileName", ИмяФайла);
	Структура.Вставить("caption", Заголовок);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendFileByUrl"), Тело);
	
КонецФункции

// Метод предназначен для отправки файла, загружаемого через форму (form-data). 
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из
// очереди регулирует параметр Интервал отправки сообщений.
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  ПутьКФайлу- -  Полный путь к файлу на диске
//  Сообщение - Строка - Текст сообщения. Поддерживаются символы emoji 
// 
// Возвращаемое значение:
//   - 
//
Функция ОтправитьФайлСДиска(Телефон, ПутьКФайлу, Сообщение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	Хост = ХостПоУмолчанию();
	
	ОтправляемыйФайл = Новый Файл(ПутьКФайлу);
	
	// подготовим файлы с данными для отправки
	массивФайлов = Новый Массив;
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	имяФайлаСПараметрами = ПолучитьимяВременногоФайла("txt"); // первый файл, содержащий параметры
	ЗаписьТекста = Новый ЗаписьТекста(имяФайлаСПараметрами);
	
	// параметр "chatId"
	ЗаписьТекста.ЗаписатьСтроку("---"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""chatId""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("""""");
	// параметр "phoneNumber"
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""phoneNumber""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку(формат(Телефон,"ЧГ="));
	// параметр "caption"
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""caption""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку(Сообщение);
	
	// начало параметра "file"
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""file""; filename=""" + ОтправляемыйФайл.Имя + """");
	ЗаписьТекста.ЗаписатьСтроку("Content-Type: image/jpeg");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.Закрыть(); // заканчиваем работу с файлом 1
	
	массивФайлов.Добавить(имяФайлаСПараметрами); // добавляем 1-ый файл для объединения
	массивФайлов.Добавить(ПутьКФайлу); // добавляем фото для объединения
	
	// третий файл, закрывающий параметры
	имяФайлаСПараметрами = ПолучитьимяВременногоФайла("txt");
	
	ЗаписьТекста = Новый ЗаписьТекста(имяФайлаСПараметрами);
	
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary+"--");
	
	ЗаписьТекста.Закрыть(); // заканчиваем работу с файлом
	
	массивФайлов.Добавить(имяФайлаСПараметрами); // добавляем файл, закрывающий параметры
	
	// результирующий файл, который и будет отправлен
	имяФайлаОтправки = ПолучитьИмяВременногоФайла("out");
	
	// объединим все файлы
	ОбъединитьФайлы(массивФайлов, имяФайлаОтправки);
	
	ФайлОтправки = Новый Файл(имяФайлаОтправки);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	// передадим данные на сервер 
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary="+boundary);
	Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	
	Ответ = ОтправитьФайлPOSTЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "sendFileByUpload"), Заголовки, ФайлОтправки);
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейсПолученияДанных

// Запускает процесс получения сообщений. Результаты выполнения метода обрабатываются методами ниже
//
ПРоцедура ПолучитьСообщение() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	ТипыУведомлений = Новый Структура;
	ТипыУведомлений.Вставить("ВходящееСообщение", "incomingMessageReceived");
	ТипыУведомлений.Вставить("СтатусОтправленногоСообщения", "outgoingMessageStatus");
	ТипыУведомлений.Вставить("СостояниеАккаунта", "stateInstanceChanged");
	ТипыУведомлений.Вставить("СостояниеТелефона", "deviceInfo");
	
	Ответ = ПолучитьУведомление();
	Если Ответ <> Неопределено Тогда
		
		Отказ = Ложь;
		ТекстСообщения = Неопределено;
		ТегСообщения = Формат(Ответ.receiptId, "ЧГ=0");
		Если Ответ.body.typeWebhook = ТипыУведомлений.ВходящееСообщение  Тогда
			Если Ответ.body.messageData.typeMessage = "imageMessage"
				Или Ответ.body.messageData.typeMessage = "videoMessage"
				Или Ответ.body.messageData.typeMessage = "documentMessage"
				Или Ответ.body.messageData.typeMessage = "audioMessage" Тогда
				
				ЧастиАдреса = РазбитьURL(Ответ.body.messageData.fileMessageData.downloadUrl);
				Если Ответ.body.messageData.typeMessage = "documentMessage" Тогда
					ИмяФайла = Ответ.body.messageData.fileMessageData.fileName;
				КонецЕсли;
				ПолноеИмяФайла = СкачатьФайл(ЧастиАдреса.Хост, ЧастиАдреса.ОтносительныйАдрес, Истина);
				Попытка
					ПриПолученииСообщенияФайл(Отказ, Ответ, ПолноеИмяФайла);
				Исключение
					Отказ = Истина;
				КонецПопытки;
			Иначе
				Попытка
					ПриПолученииСообщенияТекст(Отказ, Ответ);
				Исключение
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СтатусОтправленногоСообщения Тогда
			Попытка
				ПриПолученииСтатусаОтправленногоСообщения(Отказ, Ответ);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СостояниеАккаунта Тогда
			Попытка
				ПриПолученииСтатусаАвторизацииАккаунта(Отказ, Ответ);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СостояниеТелефона Тогда
			Попытка
				ПриПолученииСтатусаУстройства(Отказ, Ответ);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
		
		Если Не Отказ Тогда
			УдалитьСообщение(ТегСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, срабатывающий при получении текстового сообщения 
// https://green-api.com/docs/api/receiving/notifications-format/incoming-message/Webhook-IncomingMessageReceived/
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСообщенияТекст(Отказ, Данные)
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
КонецПроцедуры

// Обработчик, срабатывающий при получении файлового сообщения
// https://green-api.com/docs/api/receiving/notifications-format/incoming-message/ImageMessage/
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//  Файл - Строка - Полное имя к файлу во временном каталоге ОС
//
Процедура ПриПолученииСообщенияФайл(Отказ, Данные, Файл)
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	ЭтотОбъект.ПолученФайл = Файл;
КонецПроцедуры

// Обработчик, срабатывающий при получении статуса ранее отправленного сообщения, отправлено, доставлено, прочитано и др.
// https://green-api.com/docs/api/receiving/notifications-format/outgoing-message/OutgoingMessageStatus/
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаОтправленногоСообщения(Отказ, Данные)
	
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	
КонецПроцедуры

// Обработчик, срабатывающий при получении данных о состоянии авторизации аккаунта.
// https://green-api.com/docs/api/receiving/notifications-format/StateInstanceChanged/
//
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаАвторизацииАккаунта(Отказ, Данные)
	
 	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	
КонецПроцедуры

// Обработчик, срабатывающий при получении данных данных об устройстве и уровне заряда батареи, на котором запущено приложение WhatsApp Business
// https//green-api.com/docs/api/receiving/notifications-format/DeviceInfo/
//
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаУстройства(Отказ, Данные)
	
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсОбработки

Функция СканироватьQRКод() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Возврат ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "qr"), Истина);
	
КонецФункции

Функция ПолучитьСтатусСервиса(ТекстОшибки = "") Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Попытка
		Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getStateInstance"), Истина);
		Авторизован = НРег(Ответ.stateInstance) = "authorized";
		Если Не Авторизован Тогда
			ТекстОшибки = "Сервер вернул статус, " + Ответ.stateInstance;
		КонецЕсли;
		Возврат Авторизован;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьУведомление() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "receiveNotification"), Истина);
	Возврат Ответ;
	
КонецФункции

Функция УдалитьСообщение(ТегСообщения) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Адрес = URLМетодаСервиса(Инстанс, Токен, "deleteNotification") + "/" + ТегСообщения;
	Ответ = ОтправитьDELETEЗапрос(ХостПоУмолчанию(), Адрес, Истина);
	Возврат Ответ.result;
	
КонецФункции

Функция ПолучитьНастройкиСервиса() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getSettings"), Истина);
	Возврат Ответ;
	
КонецФункции

Функция УстановитьНастройкуСервиса(Ключ, Значение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить(Ключ, Значение);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "setSettings"), Тело);
	Возврат Ответ.saveSettings;
	
КонецФункции

Функция УстановитьНастройкиСервиса(СтруктураНастроек) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, СтруктураНастроек);
	Тело = Запись.Закрыть();
	
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "setSettings"), Тело);
	Возврат Ответ.saveSettings;
	
КонецФункции

Функция РазлогинитьАккаунт() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "Logout"), Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область HttpКлиент

Функция ОтправитьФайлPOSTЗапрос(Хост, Адрес, Заголовки, ФайлОтправки)
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows()
	);
	
	Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес,Заголовки);
	ВебЗапрос.УстановитьИмяФайлаТела(ФайлОтправки.ПолноеИмя);
	
	Ответ = Соединение.ОтправитьДляОбработки(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда 
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();Возврат ПрочитанныйОтвет;
	Иначе
		ВызватьИсключение 	Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
КонецФункции

Функция ОтправитьGETЗапрос(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows());
		
		Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.Получить(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		Если Не ПустаяСтрока(ТелоОтвета) Тогда
			Чтение = Новый ЧтениеJSON();
			Чтение.УстановитьСтроку(ТелоОтвета);
			ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
			Чтение.Закрыть();
			Возврат ПрочитанныйОтвет;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция СкачатьФайл(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows());
		
		Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.Получить(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		РасширениеФайла = ПолучитьРасширениеПоMimeType(Ответ.Заголовки["Content-Type"]);
		Если РасширениеФайла = Неопределено Тогда
			РасширениеФайла = ""
		КонецЕсли;
		
		Бинари = Ответ.ПолучитьТелоКакДвоичныеДанные();
		ИмяФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
		Бинари.Записать(ИмяФайла);
		Возврат ИмяФайла;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьPOSTЗапрос(Хост, Адрес, Тело)
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	ВебЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	ВебЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ = Соединение.ОтправитьДляОбработки(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьDELETEЗапрос(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows());
		
		Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.ВызватьHTTPМетод("DELETE", ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры,
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение,
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример,
//  ПодставитьПараметрыВСтроку(НСтр("ru="%1 пошел в %2""), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание,
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция ХостПоУмолчанию() Экспорт
	Возврат "api.green-api.com";
КонецФункции

Функция ХостВебхуковПоУмолчанию() Экспорт
	Возврат "https://webhook.green-api.com";
КонецФункции

Функция URLМетодаСервиса(Инстанс, Токен, Метод)
	Возврат ПодставитьПараметрыВСтроку("waInstance%1/%2/%3", Инстанс, Метод, Токен);
КонецФункции

Функция РазбитьURL(УРЛ)
	ЧастиУРЛ = СтрРазделить(УРЛ, "//", Ложь);
	Хост = ЧастиУРЛ[1];
	ЧастиУРЛ.Удалить(0); // протокол https
	ЧастиУРЛ.Удалить(0); // имя хоста
	ОтносительныйАдрес = СтрСоединить(ЧастиУРЛ, "/");
	
	Возврат Новый Структура("Хост, ОтносительныйАдрес", Хост, ОтносительныйАдрес);
	
КонецФункции

Функция ПараметрИдЧата(Телефон)
	Возврат Формат(Телефон, "ЧГ=") + "@c.us"
КонецФункции

Функция ВерсияОбработки() Экспорт
	Возврат "Green API v0.0.18";
КонецФункции

Функция СоответствиеMimeTypes() 

	Типы = Новый Соответствие;

	Типы.Вставить(".js"     , "application/javascript");
	Типы.Вставить(".mjs"    , "application/javascript");
	Типы.Вставить(".json"   , "application/json");
	Типы.Вставить(".webmanifest", "application/manifest+json");
	Типы.Вставить(".doc"    , "application/msword");
	Типы.Вставить(".dot"    , "application/msword");
	Типы.Вставить(".wiz"    , "application/msword");
	Типы.Вставить(".bin"    , "application/octet-stream");
	Типы.Вставить(".a"      , "application/octet-stream");
	Типы.Вставить(".dll"    , "application/octet-stream");
	Типы.Вставить(".exe"    , "application/octet-stream");
	Типы.Вставить(".o"      , "application/octet-stream");
	Типы.Вставить(".obj"    , "application/octet-stream");
	Типы.Вставить(".so"     , "application/octet-stream");
	Типы.Вставить(".oda"    , "application/oda");
	Типы.Вставить(".pdf"    , "application/pdf");
	Типы.Вставить(".p7c"    , "application/pkcs7-mime");
	Типы.Вставить(".ps"     , "application/postscript");
	Типы.Вставить(".ai"     , "application/postscript");
	Типы.Вставить(".eps"    , "application/postscript");
	Типы.Вставить(".m3u"    , "application/vnd.apple.mpegurl");
	Типы.Вставить(".m3u8"   , "application/vnd.apple.mpegurl");
	Типы.Вставить(".xls"    , "application/vnd.ms-excel");
	Типы.Вставить(".xlb"    , "application/vnd.ms-excel");
	Типы.Вставить(".ppt"    , "application/vnd.ms-powerpoint");
	Типы.Вставить(".pot"    , "application/vnd.ms-powerpoint");
	Типы.Вставить(".ppa"    , "application/vnd.ms-powerpoint");
	Типы.Вставить(".pps"    , "application/vnd.ms-powerpoint");
	Типы.Вставить(".pwz"    , "application/vnd.ms-powerpoint");
	Типы.Вставить(".wasm"   , "application/wasm");
	Типы.Вставить(".bcpio"  , "application/x-bcpio");
	Типы.Вставить(".cpio"   , "application/x-cpio");
	Типы.Вставить(".csh"    , "application/x-csh");
	Типы.Вставить(".dvi"    , "application/x-dvi");
	Типы.Вставить(".gtar"   , "application/x-gtar");
	Типы.Вставить(".hdf"    , "application/x-hdf");
	Типы.Вставить(".h5"     , "application/x-hdf5");
	Типы.Вставить(".latex"  , "application/x-latex");
	Типы.Вставить(".mif"    , "application/x-mif");
	Типы.Вставить(".cdf"    , "application/x-netcdf");
	Типы.Вставить(".nc"     , "application/x-netcdf");
	Типы.Вставить(".p12"    , "application/x-pkcs12");
	Типы.Вставить(".pfx"    , "application/x-pkcs12");
	Типы.Вставить(".ram"    , "application/x-pn-realaudio");
	Типы.Вставить(".pyc"    , "application/x-python-code");
	Типы.Вставить(".pyo"    , "application/x-python-code");
	Типы.Вставить(".sh"     , "application/x-sh");
	Типы.Вставить(".shar"   , "application/x-shar");
	Типы.Вставить(".swf"    , "application/x-shockwave-flash");
	Типы.Вставить(".sv4cpio", "application/x-sv4cpio");
	Типы.Вставить(".sv4crc" , "application/x-sv4crc");
	Типы.Вставить(".tar"    , "application/x-tar");
	Типы.Вставить(".tcl"    , "application/x-tcl");
	Типы.Вставить(".tex"    , "application/x-tex");
	Типы.Вставить(".texi"   , "application/x-texinfo");
	Типы.Вставить(".texinfo", "application/x-texinfo");
	Типы.Вставить(".roff"   , "application/x-troff");
	Типы.Вставить(".t"      , "application/x-troff");
	Типы.Вставить(".tr"     , "application/x-troff");
	Типы.Вставить(".man"    , "application/x-troff-man");
	Типы.Вставить(".me"     , "application/x-troff-me");
	Типы.Вставить(".ms"     , "application/x-troff-ms");
	Типы.Вставить(".ustar"  , "application/x-ustar");
	Типы.Вставить(".src"    , "application/x-wais-source");
	Типы.Вставить(".xsl"    , "application/xml");
	Типы.Вставить(".rdf"    , "application/xml");
	Типы.Вставить(".wsdl"   , "application/xml");
	Типы.Вставить(".xpdl"   , "application/xml");
	Типы.Вставить(".zip"    , "application/zip");
	Типы.Вставить(".au"     , "audio/basic");
	Типы.Вставить(".snd"    , "audio/basic");
	Типы.Вставить(".mp3"    , "audio/mpeg");
	Типы.Вставить(".mp2"    , "audio/mpeg");
	Типы.Вставить(".aif"    , "audio/x-aiff");
	Типы.Вставить(".aifc"   , "audio/x-aiff");
	Типы.Вставить(".aiff"   , "audio/x-aiff");
	Типы.Вставить(".ra"     , "audio/x-pn-realaudio");
	Типы.Вставить(".wav"    , "audio/x-wav");
	Типы.Вставить(".bmp"    , "image/bmp");
	Типы.Вставить(".gif"    , "image/gif");
	Типы.Вставить(".ief"    , "image/ief");
	Типы.Вставить(".jpg"    , "image/jpeg");
	Типы.Вставить(".png"    , "image/png");
	Типы.Вставить(".svg"    , "image/svg+xml");
	Типы.Вставить(".tiff"   , "image/tiff");
	Типы.Вставить(".tif"    , "image/tiff");
	Типы.Вставить(".ico"    , "image/vnd.microsoft.icon");
	Типы.Вставить(".ras"    , "image/x-cmu-raster");
	Типы.Вставить(".bmp"    , "image/x-ms-bmp");
	Типы.Вставить(".pnm"    , "image/x-portable-anymap");
	Типы.Вставить(".pbm"    , "image/x-portable-bitmap");
	Типы.Вставить(".pgm"    , "image/x-portable-graymap");
	Типы.Вставить(".ppm"    , "image/x-portable-pixmap");
	Типы.Вставить(".rgb"    , "image/x-rgb");
	Типы.Вставить(".xbm"    , "image/x-xbitmap");
	Типы.Вставить(".xpm"    , "image/x-xpixmap");
	Типы.Вставить(".xwd"    , "image/x-xwindowdump");
	Типы.Вставить(".eml"    , "message/rfc822");
	Типы.Вставить(".mht"    , "message/rfc822");
	Типы.Вставить(".mhtml"  , "message/rfc822");
	Типы.Вставить(".nws"    , "message/rfc822");
	Типы.Вставить(".css"    , "text/css");
	Типы.Вставить(".csv"    , "text/csv");
	Типы.Вставить(".html"   , "text/html");
	Типы.Вставить(".htm"    , "text/html");
	Типы.Вставить(".txt"    , "text/plain");
	Типы.Вставить(".bat"    , "text/plain");
	Типы.Вставить(".c"      , "text/plain");
	Типы.Вставить(".h"      , "text/plain");
	Типы.Вставить(".ksh"    , "text/plain");
	Типы.Вставить(".pl"     , "text/plain");
	Типы.Вставить(".rtx"    , "text/richtext");
	Типы.Вставить(".tsv"    , "text/tab-separated-values");
	Типы.Вставить(".py"     , "text/x-python");
	Типы.Вставить(".etx"    , "text/x-setext");
	Типы.Вставить(".sgm"    , "text/x-sgml");
	Типы.Вставить(".sgml"   , "text/x-sgml");
	Типы.Вставить(".vcf"    , "text/x-vcard");
	Типы.Вставить(".xml"    , "text/xml");
	Типы.Вставить(".mp4"    , "video/mp4");
	Типы.Вставить(".mpeg"   , "video/mpeg");
	Типы.Вставить(".m1v"    , "video/mpeg");
	Типы.Вставить(".mpa"    , "video/mpeg");
	Типы.Вставить(".mpe"    , "video/mpeg");
	Типы.Вставить(".mpg"    , "video/mpeg");
	Типы.Вставить(".mov"    , "video/quicktime");
	Типы.Вставить(".qt"     , "video/quicktime");
	Типы.Вставить(".webm"   , "video/webm");
	Типы.Вставить(".avi"    , "video/x-msvideo");
	Типы.Вставить(".movie"  , "video/x-sgi-movie");
	Типы.Вставить(".aac"    , "audio/aac");
	Типы.Вставить(".aac"    , "audio/aac");
	Типы.Вставить(".aac"    , "audio/aac");
	Типы.Вставить(".aac"    , "audio/aac");
	Типы.Вставить(".aac"    , "audio/aac");
	Типы.Вставить(".aac"    , "audio/aac");
	Типы.Вставить(".midi"   , "audio/midi");
	Типы.Вставить(".midi"   , "audio/x-midi");
	Типы.Вставить(".mp3"    , "audio/mpeg");
	Типы.Вставить(".ogg"    , "audio/ogg");
	Типы.Вставить(".opus"   , "audio/opus");
	Типы.Вставить(".wav"    , "audio/wav");
	Типы.Вставить(".weba"   , "audio/webm");
	Типы.Вставить(".3gp"    , "audio/3gpp");
	Типы.Вставить(".3gpp2 " , "audio/3gpp2");
	Типы.Вставить(".mp3"    , "audio/mpeg");
	
	Возврат Типы;
	
КонецФункции

Функция ПолучитьРасширениеПоMimeType(ИскомыйТип)
	
	Типы = СоответствиеMimeTypes();
	
	Для каждого КлючЗначение Из Типы Цикл
		Если СтрНайти(НРег(ИскомыйТип), НРег(КлючЗначение.Значение)) <> 0 Тогда
			Возврат КлючЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция УстановитьНастройкиСервисаПоДефолту() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("webhookUrl", ХостВебхуковПоУмолчанию());
	Структура.Вставить("incomingWebhook", "yes");
	Структура.Вставить("outgoingWebhook", "yes");
	Структура.Вставить("deviceWebhook", "yes");
	Структура.Вставить("stateWebhook", "yes");
	
	Возврат УстановитьНастройкиСервиса(Структура);
	
КонецФункции

#КонецОбласти
