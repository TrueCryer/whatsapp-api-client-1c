
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПолучениеСообщений

ПРоцедура ПолучитьСообщение() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	ТипыУведомлений = Новый Структура;
	ТипыУведомлений.Вставить("ВходящееСообщение", "incomingMessageReceived");
	ТипыУведомлений.Вставить("СтатусОтправленногоСообщения", "outgoingMessageStatus");
	ТипыУведомлений.Вставить("СостояниеАккаунта", "stateInstanceChanged");
	ТипыУведомлений.Вставить("СостояниеТелефона", "deviceInfo");
	
	Ответ = ПолучитьУведомление();
	Если Ответ <> Неопределено Тогда
		
		Отказ = Ложь;
		ТекстСообщения = Неопределено;
		ТегСообщения = Формат(Ответ.receiptId, "ЧГ=0");
		Если Ответ.body.typeWebhook = ТипыУведомлений.ВходящееСообщение  Тогда
			Если Ответ.body.messageData.typeMessage = "imageMessage"
				Или Ответ.body.messageData.typeMessage = "videoMessage"
				Или Ответ.body.messageData.typeMessage = "documentMessage"
				Или Ответ.body.messageData.typeMessage = "audioMessage" Тогда
				
				ЧастиАдреса = РазбитьURL(Ответ.body.messageData.fileMessageData.downloadUrl);
				ПолноеИмяФайла = СкачатьФайл(ЧастиАдреса.Хост, ЧастиАдреса.ОтносительныйАдрес, Истина);
				Попытка
					ПриПолученииФайла(Отказ, ПолноеИмяФайла);
				Исключение
					Отказ = Истина;
				КонецПопытки;
			Иначе
				Попытка
					ПриПолученииСообщения(Отказ, Ответ);
				Исключение
					Отказ = Истина;
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СтатусОтправленногоСообщения Тогда
			Попытка
				ПриПолученииСтатусаОтправленногоСообщения(Отказ, Ответ);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СостояниеАккаунта Тогда
			Попытка
				ПриПолученииСтатусаАвторизацииАккаунта(Отказ, Ответ);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СостояниеТелефона Тогда
			Попытка
				ПриПолученииСтатусаУстройства(Отказ, Ответ);
			Исключение
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли;
		
		Если Не Отказ Тогда
			УдалитьСообщение(ТегСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, срабатывающий при получении текстового сообщения 
// https://green-api.com/docs/api/receiving/notifications-format/incoming-message/Webhook-IncomingMessageReceived/
// Параметры:
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСообщения(Отказ, Данные)
	
	ЭтотОбъект.ТекстПолученноеСообщение = Данные.body;
	
	//Если Данные.body.messageData.typeMessage = "textMessage" Тогда
	//	ЭтотОбъект.ТекстПолученноеСообщение = Данные.body.messageData.textMessageData.textMessage;
	//ИначеЕсли Данные.body.messageData.typeMessage = "extendedTextMessage" Тогда
	//	ЭтотОбъект.ТекстПолученноеСообщение = Данные.body.messageData.extendedTextMessageData.text;
	//ИначеЕсли Данные.body.messageData.typeMessage = "locationMessage" Тогда
	//	ЭтотОбъект.ТекстПолученноеСообщение = "latitude=" + Данные.body.messageData.locationMessageData.latitude 
	//	+ "longitude=" + Данные.body.messageData.locationMessageData.longitude
	//ИначеЕсли Данные.body.messageData.typeMessage = "contactMessage" Тогда
	//	ЭтотОбъект.ТекстПолученноеСообщение = Данные.body.messageData.contactMessageData.vcard;
	//Иначе
	//	ЭтотОбъект.ТекстПолученноеСообщение = Данные.body.messageData;
	//КонецЕсли;
	
КонецПроцедуры

// Обработчик, срабатывающий при получении файлового сообщения
// https://green-api.com/docs/api/receiving/notifications-format/incoming-message/ImageMessage/
// Параметры:
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Файл - Строка - Полное имя к файлу во временном каталоге ОС
//
Процедура ПриПолученииФайла(Отказ, Файл)
	ЭтотОбъект.ПолученФайл = Файл;
КонецПроцедуры

// Обработчик, срабатывающий при получении статуса ранее отправленного сообщения: отправлено, доставлено, прочитано и др.
// https://green-api.com/docs/api/receiving/notifications-format/outgoing-message/OutgoingMessageStatus/
// Параметры:
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаОтправленногоСообщения(Отказ, Данные)
	
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	
КонецПроцедуры

// Обработчик, срабатывающий при получении данных о состоянии авторизации аккаунта.
// https://green-api.com/docs/api/receiving/notifications-format/StateInstanceChanged/
//
// Параметры:
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаАвторизацииАккаунта(Отказ, Данные)
	
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	
КонецПроцедуры

// Обработчик, срабатывающий при получении данных данных об устройстве и уровне заряда батареи, на котором запущено приложение WhatsApp Business
// https://green-api.com/docs/api/receiving/notifications-format/DeviceInfo/
//
// Параметры:
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаУстройства(Отказ, Данные)
	
	ЭтотОбъект.ТекстПолученноеСообщение = ЗначениеВСтрокуВнутр(Данные.body);
	
КонецПроцедуры

#КонецОбласти

#Область GreeAPI

Функция СканироватьQRКод() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Возврат ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "qr"), Истина);
	
КонецФункции

Функция ПолучитьСтатусСервиса(ТекстОшибки = "") Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Попытка
		Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getStateInstance"), Истина);
		Авторизован = НРег(Ответ.stateInstance) = "authorized";
		Если Не Авторизован Тогда
			ТекстОшибки = "Сервер вернул статус: " + Ответ.stateInstance;
		КонецЕсли;
		Возврат Авторизован;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьУведомление() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "receiveNotification"), Истина);
	Возврат Ответ;
	
КонецФункции

Функция ОтправитьСообщение(Телефон, Сообщение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", "");
	Структура.Вставить("phoneNumber", Телефон);
	Структура.Вставить("message", Сообщение);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendMessage"), Тело);
	
КонецФункции

Функция ОтправитьФайлПоСсылке(Телефон, УРЛФайла, ИмяФайла, Заголовок = "") Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Структура.Вставить("urlFile", УРЛФайла);
	Структура.Вставить("fileName", ИмяФайла);
	Структура.Вставить("caption", Заголовок);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendFileByUrl"), Тело);
	
КонецФункции

Функция ОтправитьФайлСДиска(Телефон, Файл, Сообщение = "") Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	Хост = ХостПоУмолчанию();
	
	// подготовим файлы с данными для отправки
	массивФайлов = Новый Массив;
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	имяФайлаСПараметрами = ПолучитьимяВременногоФайла("txt"); 
	// первый файл, содержащий параметры
	ЗаписьТекста = Новый ЗаписьТекста(имяФайлаСПараметрами);
	
	// параметр "chatId"
	ЗаписьТекста.ЗаписатьСтроку("---"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""chatId""");
	ЗаписьТекста.ЗаписатьСтроку("");
	// параметр "phoneNumber"
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""phoneNumber""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку(ПараметрИдЧата(Телефон));
	// параметр "caption"
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""caption""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку(Сообщение);
	
	// начало параметра "file"
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""file""; filename=""" + Файл + """");
	ЗаписьТекста.ЗаписатьСтроку("Content-Type: image/jpeg");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.Закрыть(); 
	// заканчиваем работу с файлом 1
	
	массивФайлов.Добавить(имяФайлаСПараметрами); 
	// добавляем 1-ый файл для объединения
	массивФайлов.Добавить(Файл); 
	// добавляем фото для объединения
	
	// третий файл, закрывающий параметры
	имяФайлаСПараметрами = ПолучитьимяВременногоФайла("txt");
	
	ЗаписьТекста = Новый ЗаписьТекста(имяФайлаСПараметрами);
	
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("--" + boundary + "--");
	
	ЗаписьТекста.Закрыть(); // заканчиваем работу с файлом
	
	массивФайлов.Добавить(имяФайлаСПараметрами); // добавляем файл, закрывающий параметры
	
	// результирующий файл, который и будет отправлен
	
	имяФайлаОтправки = ПолучитьИмяВременногоФайла("out");
	
	// объединим все файлы
	
	ОбъединитьФайлы(массивФайлов, имяФайлаОтправки);
	
	ФайлОтправки = Новый Файл(имяФайлаОтправки);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	// передадим данные на сервер 
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary="+boundary);
	Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	
	Ответ = ОтправитьФайлPOSTЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "sendFileByUpload"), Заголовки, ФайлОтправки);
	
	Возврат Ответ;
	
КонецФункции

Функция УдалитьСообщение(ТегСообщения) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Адрес = URLМетодаСервиса(Инстанс, Токен, "deleteNotification") + "/" + ТегСообщения;
	Ответ = ОтправитьDELETEЗапрос(ХостПоУмолчанию(), Адрес, Истина);
	Возврат Ответ.result;
	
КонецФункции

Функция ПолучитьНастройкиСервиса() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getSettings"), Истина);
	Возврат Ответ;
	
КонецФункции

Функция УстановитьНастройкуСервиса(Ключ, Значение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить(Ключ, Значение);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "setSettings"), Тело);
	Возврат Ответ.saveSettings;
	
КонецФункции

Функция РазлогинитьАккаунт() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "Logout"), Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область HttpКлиент

Функция ОтправитьФайлPOSTЗапрос(Хост, Адрес, Заголовки, ФайлОтправки)
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows()
	);
	
	Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес,Заголовки);
	ВебЗапрос.УстановитьИмяФайлаТела(ФайлОтправки.ПолноеИмя);
	
	Ответ = Соединение.ОтправитьДляОбработки(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда 
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();Возврат ПрочитанныйОтвет;
	Иначе
		ВызватьИсключение 	Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
КонецФункции

Функция ОтправитьGETЗапрос(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows());
		
		Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.Получить(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		Если Не ПустаяСтрока(ТелоОтвета) Тогда
			Чтение = Новый ЧтениеJSON();
			Чтение.УстановитьСтроку(ТелоОтвета);
			ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
			Чтение.Закрыть();
			Возврат ПрочитанныйОтвет;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция СкачатьФайл(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows());
		
		Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.Получить(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Бинари = Ответ.ПолучитьТелоКакДвоичныеДанные();
		ИмяФайла = ПолучитьИмяВременногоФайла();
		Бинари.Записать(ИмяФайла);
		Возврат ИмяФайла;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьPOSTЗапрос(Хост, Адрес, Тело)
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	ВебЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	ВебЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ = Соединение.ОтправитьДляОбработки(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьDELETEЗапрос(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows());
		
		Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.ВызватьHTTPМетод("DELETE", ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// ВНУТРЕННИЕ СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание:
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция ХостПоУмолчанию() Экспорт
	Возврат "api.green-api.com";
КонецФункции

Функция ХостВебхуковПоУмолчанию() Экспорт
	Возврат "https://webhook.green-api.com";
КонецФункции

Функция URLМетодаСервиса(Инстанс, Токен, Метод)
	Возврат ПодставитьПараметрыВСтроку("waInstance%1/%2/%3", Инстанс, Метод, Токен);
КонецФункции

Функция РазбитьURL(УРЛ)
	ЧастиУРЛ = СтрРазделить(УРЛ, "//", Ложь);
	Хост = ЧастиУРЛ[1];
	ЧастиУРЛ.Удалить(0); // протокол https
	ЧастиУРЛ.Удалить(0); // имя хоста
	ОтносительныйАдрес = СтрСоединить(ЧастиУРЛ, "/");
	
	Возврат Новый Структура("Хост, ОтносительныйАдрес", Хост, ОтносительныйАдрес);
	
КонецФункции

Функция ПараметрИдЧата(Телефон)
	Возврат Формат(Телефон, "ЧГ=") + "@c.us"
КонецФункции

#КонецОбласти
